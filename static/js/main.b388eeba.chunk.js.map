{"version":3,"sources":["components/Header.js","components/Loading.js","components/generics/Input.js","components/generics/Select.js","genres.js","components/SearchBar.js","components/MovieCard.js","services/movieData.js","services/movieAPI.js","pages/MovieList.js","pages/MovieDetails.js","components/MovieForm.js","pages/NewMovie.js","pages/EditMovie.js","pages/NotFound.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","React","Component","Loading","Input","this","props","name","id","classNameInput","classNameLabel","onChange","type","step","value","checked","textLabel","htmlFor","defaultProps","Select","options","Object","entries","map","option","classNameSelect","renderOptions","genres","Todos","Ação","Comédia","Suspense","Fantasia","SearchBar","searchText","onSearchTextChange","bookmarkedOnly","onBookmarkedChange","selectedGenre","onSelectedGenreChange","dataTestidSelect","MovieCard","movie","state","bookmarked","handleClick","bind","onClick","setState","title","subtitle","rating","storyline","imagePath","style","color","alt","src","to","movies","genre","localStorage","setItem","JSON","stringify","data","readMovies","parse","getItem","saveMovies","SUCCESS_STATUS","simulateRequest","response","callback","setTimeout","getMovie","movieId","find","mov","parseInt","Promise","resolve","updateMovie","updatedMovie","createMovie","movieData","nextId","length","newMovie","deleteMovie","filter","status","MovieList","handleChange","fetchMovies","markMovie","filterMovies","target","a","bookmarkChanged","Number","movieAPI","marked","search","toLowerCase","includes","favorite","MovieDetails","loading","mounted","fetchMovie","match","params","test","MovieForm","handleSubmit","onSubmit","field","newValue","placeholder","event","min","max","renderTitleInput","renderSubtitleInput","renderImagePathInput","renderStorylineInput","renderGenreSelection","renderRatingInput","renderSubmitButton","NewMovie","shouldRedirect","EditMovie","NotFound","Footer","App","path","component","render","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b388eeba.chunk.js","sourcesContent":["import React from 'react';\nimport '../css/header.css';\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <header className=\"movie-card-header\">\n        <h1 className=\"page-title\">Movie Card Library CRUD</h1>\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport '../css/loading.css';\n\nclass Loading extends Component {\n  render() {\n    return (\n      <div className=\"loading\">\n        <div className=\"loading-text\">Carregando...</div>\n        <div className=\"loading-logo\" />\n      </div>\n    );\n  }\n}\n\nexport default Loading;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Input extends Component {\n  render() {\n    const {\n      name,\n      id,\n      classNameInput,\n      classNameLabel,\n      onChange,\n      type,\n      step,\n      value,\n      checked,\n      textLabel,\n    } = this.props;\n\n    return (\n      <label\n        htmlFor={ id }\n        className={ classNameLabel }\n      >\n\n        { textLabel }\n\n        <input\n          name={ name }\n          id={ id }\n          type={ type }\n          step={ step }\n          value={ value }\n          onChange={ onChange }\n          className={ classNameInput }\n          checked={ checked }\n        />\n\n      </label>\n    );\n  }\n}\n\nInput.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string,\n  classNameInput: PropTypes.string,\n  classNameLabel: PropTypes.string,\n  onChange: PropTypes.func,\n  type: PropTypes.string,\n  step: PropTypes.string,\n  value: PropTypes.node,\n  checked: PropTypes.bool,\n  textLabel: PropTypes.string,\n};\n\nInput.defaultProps = {\n  name: '',\n  classNameInput: '',\n  classNameLabel: '',\n  onChange: () => {},\n  type: 'text',\n  step: '',\n  value: '',\n  checked: false,\n  textLabel: '',\n};\n\nexport default Input;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Select extends Component {\n  renderOptions(options) {\n    const optionsArr = Object.entries(options);\n    return optionsArr\n      .map((option) => (\n        <option\n          value={ option[1] }\n          key={ option[0] }\n        >\n\n          { option[0] }\n\n        </option>\n      ));\n  }\n\n  render() {\n    const {\n      id,\n      name,\n      classNameLabel,\n      classNameSelect,\n      onChange,\n      value,\n      textLabel,\n      options,\n    } = this.props;\n\n    return (\n      <label\n        htmlFor={ id }\n        className={ classNameLabel }\n      >\n\n        { textLabel }\n\n        <select\n          id={ id }\n          name={ name }\n          value={ value }\n          onChange={ onChange }\n          className={ classNameSelect }\n        >\n\n          { this.renderOptions(options) }\n\n        </select>\n\n      </label>\n    );\n  }\n}\n\nSelect.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string,\n  classNameLabel: PropTypes.string,\n  classNameSelect: PropTypes.string,\n  onChange: PropTypes.func,\n  value: PropTypes.string,\n  textLabel: PropTypes.string,\n  options: PropTypes.objectOf(PropTypes.string).isRequired,\n};\n\nSelect.defaultProps = {\n  name: '',\n  classNameLabel: '',\n  classNameSelect: '',\n  onChange: () => {},\n  value: '',\n  textLabel: '',\n};\n\nexport default Select;\n","const genres = {\n  Todos: '',\n  Ação: 'action',\n  Comédia: 'comedy',\n  Suspense: 'thriller',\n  Fantasia: 'fantasy',\n};\n\nexport default genres;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Input from './generics/Input';\nimport Select from './generics/Select';\nimport genres from '../genres';\nimport '../css/searchBar.css';\n\nclass SearchBar extends Component {\n  render() {\n    const {\n      searchText,\n      onSearchTextChange,\n      bookmarkedOnly,\n      onBookmarkedChange,\n      selectedGenre,\n      onSelectedGenreChange,\n    } = this.props;\n\n    return (\n      <form\n        className=\"form-searchBar\"\n      >\n        <Input\n          id=\"include-text\"\n          textLabel=\"Inclui o texto:\"\n          value={ searchText }\n          onChange={ onSearchTextChange }\n          name=\"searchText\"\n        />\n        <Input\n          id=\"show-favorites\"\n          textLabel=\"Mostrar somente favoritos\"\n          type=\"checkbox\"\n          checked={ bookmarkedOnly }\n          onChange={ onBookmarkedChange }\n          name=\"bookmarkedOnly\"\n        />\n        <Select\n          id=\"gender-filter\"\n          dataTestidSelect=\"select-input\"\n          textLabel=\"Filtrar por gênero\"\n          value={ selectedGenre }\n          onChange={ onSelectedGenreChange }\n          options={ genres }\n          name=\"selectedGenre\"\n        />\n      </form>\n    );\n  }\n}\n\nSearchBar.propTypes = {\n  searchText: PropTypes.string.isRequired,\n  onSearchTextChange: PropTypes.func.isRequired,\n  bookmarkedOnly: PropTypes.bool.isRequired,\n  onBookmarkedChange: PropTypes.func.isRequired,\n  selectedGenre: PropTypes.string.isRequired,\n  onSelectedGenreChange: PropTypes.func.isRequired,\n};\n\nexport default SearchBar;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport '../css/movieCard.css';\n\nclass MovieCard extends React.Component {\n  constructor({ movie }) {\n    super();\n    this.state = {\n      bookmarked: movie.bookmarked,\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    const { onClick, movie: { id } } = this.props;\n\n    this.setState((state) => ({\n      bookmarked: !state.bookmarked,\n    }), () => {\n      const { bookmarked } = this.state;\n      onClick(bookmarked, id);\n    });\n  }\n\n  render() {\n    const { movie } = this.props;\n\n    const { title, subtitle, rating, storyline, imagePath, id } = movie;\n\n    const { bookmarked } = this.state;\n\n    return (\n      <div data-testid=\"movie-card\" className=\"movie-card\">\n        <div className=\"bookmarked\">\n          <button type=\"button\" onClick={ this.handleClick }>\n            <i\n              className=\"bi bi-bookmark-star-fill\"\n              style={ bookmarked ? { color: '#f48024' } : { color: '#6e6e6edd' } }\n            />\n          </button>\n        </div>\n        <div className=\"movie-card-body\">\n          <img alt=\"Movie Cover\" className=\"movie-card-image\" src={ imagePath } />\n          <h4 className=\"movie-card-title\">{title}</h4>\n          <h5 className=\"movie-card-subtitle\">{subtitle}</h5>\n          <p className=\"movie-card-storyline\">{storyline}</p>\n        </div>\n        <div className=\"movie-card-rating\">\n          <Link to={ `/movies/${id}` }>VER DETALHES</Link>\n          <span className=\"rating\">{ rating }</span>\n        </div>\n      </div>\n    );\n  }\n}\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string,\n    subtitle: PropTypes.string,\n    storyline: PropTypes.string,\n    imagePath: PropTypes.string,\n    bookmarked: PropTypes.bool,\n    rating: PropTypes.node,\n    id: PropTypes.number,\n  }).isRequired,\n  onClick: PropTypes.func,\n};\n\nMovieCard.defaultProps = {\n  onClick: () => {},\n};\n\nexport default MovieCard;\n","const movies = [\n  {\n    id: 1,\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\n    rating: 4.5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 2,\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: 'images/Final_Fantasy_Spirits_Within.jpg',\n    bookmarked: false,\n    genre: 'fantasy',\n  },\n  {\n    id: 3,\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: 'images/Ghost_In_The_Shell_2_0.jpg',\n    bookmarked: false,\n    genre: 'comedy',\n  },\n  {\n    id: 4,\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n    rating: 3.8,\n    imagePath: 'images/Appleseed_Alpha.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 5,\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\n    bookmarked: true,\n    genre: 'fantasy',\n  },\n];\n\nexport default movies;\n","import data from './movieData';\n\nlocalStorage.setItem('movies', JSON.stringify(data));\n\nconst readMovies = () => JSON.parse(localStorage.getItem('movies'));\nconst saveMovies = (movies) => localStorage.setItem('movies', JSON.stringify(movies));\n\nconst TIMEOUT = 2000;\nconst SUCCESS_STATUS = 'OK';\n\n// --------------------------------------------------------------------\n// A função simulateRequest simula uma requisição para uma API externa\n// Esse tipo de função que \"chama outra função\" é chamada de\n// \"currying function\" https://javascript.info/currying-partials\n// não se preocupe, estudaremos isso mais futuramente\n// --------------------------------------------------------------------\n\nconst simulateRequest = (response) => (callback) => {\n  setTimeout(() => {\n    callback(response);\n  }, TIMEOUT);\n};\n\nexport const getMovies = () => (\n  new Promise((resolve) => {\n    const movies = readMovies();\n    simulateRequest(movies)(resolve);\n  })\n);\n\nexport const getMovie = (movieId) => {\n  const movie = readMovies().find((mov) => mov.id === parseInt(movieId, 10));\n  return new Promise((resolve) => {\n    simulateRequest(movie)(resolve);\n  });\n};\n\nexport const updateMovie = (updatedMovie) => (\n  new Promise((resolve) => {\n    const movies = readMovies().map((movie) => {\n      if (movie.id === parseInt(updatedMovie.id, 10)) {\n        return { ...movie, ...updatedMovie };\n      }\n      return movie;\n    });\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const createMovie = (movieData) => (\n  new Promise((resolve) => {\n    let movies = readMovies();\n    const nextId = movies[movies.length - 1].id + 1;\n    const newMovie = { ...movieData, id: nextId };\n    movies = [...movies, newMovie];\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const deleteMovie = (movieId) => {\n  let movies = readMovies();\n  movies = movies.filter((movie) => movie.id !== parseInt(movieId, 10));\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    simulateRequest({ status: SUCCESS_STATUS })(resolve);\n  });\n};\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Loading from '../components/Loading';\nimport SearchBar from '../components/SearchBar';\nimport MovieCard from '../components/MovieCard';\nimport '../css/movieList.css';\n\nimport * as movieAPI from '../services/movieAPI';\n\nclass MovieList extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      searchText: '',\n      bookmarkedOnly: false,\n      selectedGenre: '',\n      movies: [],\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.fetchMovies = this.fetchMovies.bind(this);\n    this.markMovie = this.markMovie.bind(this);\n    this.filterMovies = this.filterMovies.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchMovies();\n  }\n\n  handleChange({ target }) {\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n    this.setState({ [target.name]: value });\n  }\n\n  async fetchMovies() {\n    const movies = await movieAPI.getMovies();\n    this.setState((state) => ({ ...state, movies: [...movies] }));\n  }\n\n  markMovie(bookmarked, id) {\n    const { movies } = this.state;\n    const bookmarkChanged = movies.find((movie) => Number(movie.id) === Number(id));\n    bookmarkChanged.bookmarked = bookmarked;\n    movieAPI.updateMovie(bookmarkChanged);\n  }\n\n  filterMovies(movies) {\n    const { bookmarkedOnly: marked, selectedGenre: genre, searchText } = this.state;\n\n    const search = movies.filter((movie) => {\n      const check = (movie.title.toLowerCase()\n        .includes(searchText.toLowerCase())\n      || movie.subtitle.toLowerCase().includes(searchText.toLowerCase())\n      || movie.storyline.toLowerCase().includes(searchText.toLowerCase()));\n      return check;\n    });\n\n    const favorite = marked ? search.filter((movie) => (movie.bookmarked)) : search;\n\n    const result = genre ? favorite.filter((movie) => movie.genre === genre) : favorite;\n\n    return result;\n  }\n\n  render() {\n    const {\n      searchText,\n      bookmarkedOnly,\n      selectedGenre,\n      movies,\n    } = this.state;\n\n    if (!movies.length) return (<Loading />);\n\n    return (\n      <section>\n        <SearchBar\n          searchText={ searchText }\n          onSearchTextChange={ this.handleChange }\n          bookmarkedOnly={ bookmarkedOnly }\n          onBookmarkedChange={ this.handleChange }\n          selectedGenre={ selectedGenre }\n          onSelectedGenreChange={ this.handleChange }\n        />\n        <div data-testid=\"movie-list\" className=\"movie-list\">\n          <Link to=\"/movies/new\" className=\"add-movie\">ADICIONAR CARTÃO</Link>\n          {this.filterMovies(movies).map((movie) => (<MovieCard\n            key={ movie.title }\n            movie={ movie }\n            onClick={ this.markMovie }\n          />))}\n        </div>\n      </section>\n    );\n  }\n}\n\nexport default MovieList;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport '../css/movieDetails.css';\n\nimport * as movieAPI from '../services/movieAPI';\nimport Loading from '../components/Loading';\n\nclass MovieDetails extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      movie: {},\n      loading: true,\n    };\n    this.mounted = false; // foi consulta o Stackoverflow para resolver warning e se certificar de que a função assíncrona foi cancelada (source: https://stackoverflow.com/questions/52061476/cancel-all-subscriptions-and-asyncs-in-the-componentwillunmount-method-how)\n    this.fetchMovie = this.fetchMovie.bind(this);\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n    if (this.mounted) {\n      this.fetchMovie();\n    }\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  async fetchMovie() {\n    const { match: { params: { id } } } = this.props;\n    const movie = await movieAPI.getMovie(id);\n    if (this.mounted) {\n      this.setState((state) => ({\n        ...state,\n        movie,\n        loading: false,\n      }));\n    }\n  }\n\n  async deleteMovie(id) {\n    await movieAPI.deleteMovie(id);\n  }\n\n  render() {\n    const {\n      movie: { title, storyline, imagePath, genre, rating, subtitle, id },\n      loading,\n    } = this.state;\n\n    if (loading) return <Loading />;\n\n    return (\n      <div data-testid=\"movie-details\" className=\"movie-details\">\n        <div>\n          <img\n            alt=\"Movie Cover\"\n            src={ /^http/.test(imagePath) ? imagePath : `../${imagePath}` }\n          />\n          <p>\n            <strong>{ 'Título: '}</strong>\n            {title}\n          </p>\n          <p>\n            <strong>{ 'Subtítulo: '}</strong>\n            {subtitle}\n          </p>\n          <p>\n            <strong>{ 'Sinopse: '}</strong>\n            {storyline}\n          </p>\n          <p>\n            <strong>{ 'Gênero: '}</strong>\n            {genre}\n          </p>\n          <p>\n            <strong>{ 'Avaliação: '}</strong>\n            {rating}\n          </p>\n        </div>\n        <div className=\"details-button\">\n          <Link to={ `/movies/${id}/edit` }>EDITAR</Link>\n          <Link to=\"/\">VOLTAR</Link>\n          <Link to=\"/\" onClick={ () => this.deleteMovie(id) }>DELETAR</Link>\n        </div>\n      </div>\n    );\n  }\n}\n\nMovieDetails.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string.isRequired,\n    }),\n  }).isRequired,\n};\n\nexport default MovieDetails;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../css/movieForm.css';\n\nclass MovieForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...props.movie };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit() {\n    const { onSubmit } = this.props;\n    onSubmit(this.state);\n  }\n\n  updateMovie(field, newValue) {\n    this.setState({ [field]: newValue });\n  }\n\n  renderTitleInput() {\n    const { title } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_title\">\n          Título\n          <input\n            placeholder=\"Insira o título\"\n            id=\"movie_title\"\n            type=\"text\"\n            className=\"validate\"\n            value={ title }\n            onChange={ (event) => this.updateMovie('title', event.target.value) }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderSubtitleInput() {\n    const { subtitle } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_subtitle\">\n          Subtítulo\n          <input\n            placeholder=\"Insira o subtítulo\"\n            id=\"movie_subtitle\"\n            type=\"text\"\n            value={ subtitle }\n            onChange={ (event) => this.updateMovie('subtitle', event.target.value) }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderImagePathInput() {\n    const { imagePath } = this.state;\n\n    return (\n      <div className=\"row\">\n        <label htmlFor=\"movie_image\">\n          Imagem\n          <input\n            placeholder=\"Insira o caminho da imagem\"\n            id=\"movie_image\"\n            type=\"text\"\n            value={ imagePath }\n            onChange={ (event) => this.updateMovie('imagePath', event.target.value) }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderStorylineInput() {\n    const { storyline } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_storyline\">\n          Sinopse\n          <textarea\n            id=\"movie_storyline\"\n            value={ storyline }\n            onChange={ (event) => this.updateMovie('storyline', event.target.value) }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderGenreSelection() {\n    const { genre } = this.state;\n    return (\n      <div>\n        <label htmlFor=\"movie_genre\">\n          Gênero\n          <select\n            id=\"movie_genre\"\n            value={ genre }\n            onChange={ (event) => this.updateMovie('genre', event.target.value) }\n          >\n            <option value=\"action\">Ação</option>\n            <option value=\"comedy\">Comédia</option>\n            <option value=\"thriller\">Suspense</option>\n            <option value=\"fantasy\">Fantasia</option>\n          </select>\n        </label>\n      </div>\n    );\n  }\n\n  renderRatingInput() {\n    const { rating } = this.state;\n    return (\n      <div className=\"movie-rating\">\n        <label htmlFor=\"movie_rating\">\n          Avaliação\n          <input\n            placeholder=\"Dê a avaliação do filme\"\n            id=\"movie_rating\"\n            type=\"number\"\n            step={ 0.1 }\n            min={ 0 }\n            max={ 5 }\n            value={ rating }\n            onChange={ (event) => this.updateMovie('rating', event.target.value) }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderSubmitButton() {\n    return (\n      <div className=\"btn-container\">\n        <button\n          type=\"button\"\n          onClick={ this.handleSubmit }\n        >\n          Submit\n        </button>\n      </div>\n    );\n  }\n\n  render() {\n    const { title } = this.props;\n    return (\n      <div>\n        <form className=\"movie-form\">\n          <h2 className=\"form-title\">{ title }</h2>\n          {this.renderTitleInput()}\n          {this.renderSubtitleInput()}\n          {this.renderImagePathInput()}\n          {this.renderStorylineInput()}\n          {this.renderGenreSelection()}\n          {this.renderRatingInput()}\n          {this.renderSubmitButton()}\n        </form>\n      </div>\n    );\n  }\n}\n\nMovieForm.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string,\n    subtitle: PropTypes.string,\n    storyline: PropTypes.string,\n    rating: PropTypes.node,\n    imagePath: PropTypes.string,\n    genre: PropTypes.string,\n  }),\n  title: PropTypes.string,\n  onSubmit: PropTypes.func.isRequired,\n};\n\nMovieForm.defaultProps = {\n  movie: {\n    title: '',\n    subtitle: '',\n    storyline: '',\n    rating: '',\n    imagePath: '',\n    genre: '',\n  },\n  title: '',\n};\n\nexport default MovieForm;\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport Loading from '../components/Loading';\nimport MovieForm from '../components/MovieForm';\nimport * as movieAPI from '../services/movieAPI';\n\nclass NewMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: false,\n      shouldRedirect: false,\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.createMovie = this.createMovie.bind(this);\n  }\n\n  handleSubmit(newMovie) {\n    this.setState({\n      loading: true,\n    }, () => this.createMovie(newMovie));\n  }\n\n  async createMovie(newMovie) {\n    await movieAPI.createMovie(newMovie);\n    this.setState({\n      loading: false,\n      shouldRedirect: true,\n    });\n  }\n\n  render() {\n    const { loading, shouldRedirect } = this.state;\n\n    if (shouldRedirect) return <Redirect to=\"/\" />;\n\n    if (loading) return <Loading />;\n\n    return (\n      <div data-testid=\"new-movie\">\n        <MovieForm title=\"Adicione um Novo Filme:\" onSubmit={ this.handleSubmit } />\n      </div>\n    );\n  }\n}\nexport default NewMovie;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\nimport Loading from '../components/Loading';\nimport MovieForm from '../components/MovieForm';\nimport * as movieAPI from '../services/movieAPI';\n\nclass EditMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      movie: {},\n      loading: true,\n      shouldRedirect: false,\n    };\n    this.mounted = false;\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.fetchMovie = this.fetchMovie.bind(this);\n    this.updateMovie = this.updateMovie.bind(this);\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n    if (this.mounted) {\n      this.fetchMovie();\n    }\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  handleSubmit(updatedMovie) {\n    this.setState({ loading: true }, () => {\n      this.updateMovie(updatedMovie);\n    });\n  }\n\n  updateMovie(updatedMovie) {\n    movieAPI.updateMovie(updatedMovie);\n    this.setState({ loading: false, shouldRedirect: true });\n  }\n\n  async fetchMovie() {\n    const { match: { params: { id } } } = this.props;\n    const movie = await movieAPI.getMovie(id);\n    if (this.mounted) {\n      this.setState({\n        movie,\n        loading: false,\n      });\n    }\n  }\n\n  render() {\n    const { loading, shouldRedirect, movie } = this.state;\n    if (shouldRedirect) {\n      return <Redirect to=\"/\" />;\n    }\n\n    if (loading) {\n      return <Loading />;\n    }\n\n    return (\n      <div data-testid=\"edit-movie\">\n        <MovieForm title=\"Editar Filme:\" movie={ movie } onSubmit={ this.handleSubmit } />\n      </div>\n    );\n  }\n}\n\nEditMovie.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string.isRequired,\n    }),\n  }).isRequired,\n};\n\nexport default EditMovie;\n","import React, { Component } from 'react';\n\nclass NotFound extends Component {\n  render() {\n    return <div data-testid=\"404-error\">Página não encontrada</div>;\n  }\n}\n\nexport default NotFound;\n","import React from 'react';\nimport '../css/footer.css';\n\nclass Footer extends React.Component {\n  render() {\n    return (\n      <footer className=\"footer\">\n        <h5>\n          Compilado por Diogo\n          { ' Sant\\'' }\n          Anna\n        </h5>\n      </footer>\n    );\n  }\n}\n\nexport default Footer;\n","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport Header from './components/Header';\nimport MovieList from './pages/MovieList';\nimport MovieDetails from './pages/MovieDetails';\nimport NewMovie from './pages/NewMovie';\nimport EditMovie from './pages/EditMovie';\nimport NotFound from './pages/NotFound';\nimport Footer from './components/Footer';\nimport './App.css';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <div className=\"fix-app\">\n            <Header />\n            <Switch>\n              <Route\n                path=\"/\"\n                component={ MovieList } />\n              <Route\n                path=\"/movies/new\"\n                render={ (props) => <NewMovie { ...props } /> } />\n              <Route\n                path=\"/movies/:id/edit\"\n                render={ (props) => <EditMovie { ...props } /> }\n              />\n              <Route\n                path=\"/movies/:id\"\n                render={ (props) => <MovieDetails { ...props } /> }\n              />\n              <Route path=\"/:*\" component={ NotFound } />\n            </Switch>\n          </div>\n          <Footer />\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}